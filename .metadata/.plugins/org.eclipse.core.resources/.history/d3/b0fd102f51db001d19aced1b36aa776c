package com.hanati.library.data;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Scanner;

import com.hanati.library.domian.model.BookLoan;
import com.hanati.library.domian.repository.BookLoanRepository;

public class BookLoanRepositorylmpl implements BookLoanRepository {
	ArrayList<BookLoan> bookLaonList = new ArrayList<>();
	Scanner scanner = new Scanner(System.in);
	Connection conn = null;
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	ResultSet rs = null;
	String driver = "oracle.jdbc.driver.OracleDriver";
	String url = "jdbc:oracle:thin:@192.168.119.119:1521:dink";
	String user = "scott";
	String password = "tiger";
	Calendar calendar = Calendar.getInstance();
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

	@Override
	public List<BookLoan> loadBookLoan() {
		bookLaonList.clear();
		try {
			String sql = "SELECT bookloan.*, book.title AS bookname, member.name AS membername\n" + "FROM bookloan\n"
					+ "JOIN book ON bookloan.bookid = book.id\n"
					+ "JOIN member ON bookloan.memberid = member.id ORDER BY deadline";
			Class.forName(driver);
			conn = DriverManager.getConnection(url, user, password);
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				int bookId = rs.getInt("bookId");
				int memberId = rs.getInt("memberId");
				String bookName = rs.getString("bookName");
				String memberName = rs.getString("memberName");
				boolean isextension = rs.getBoolean("isextension");
				Date loanDate = rs.getDate("loanDate");
				String formattedLoanDate = dateFormat.format(loanDate);
				Date deadLine = rs.getDate("deadline");
				String formatteddeadLine = dateFormat.format(deadLine);

				BookLoan bookLoan = new BookLoan(id, bookId, memberId, bookName, memberName, isextension,
						formattedLoanDate, formatteddeadLine);
				bookLaonList.add(bookLoan);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

		return bookLaonList;
	}

	@Override
	public void updateBookLaon(int bookid) {
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    
	    try {
	        Class.forName(driver);
	        conn = DriverManager.getConnection(url, user, password);
	        conn.setAutoCommit(false);

	        // bookloan의 bookid가 일치하고 isEXTENSION이 0인 레코드를 찾는 쿼리
	        String checkSql = "SELECT * FROM bookloan WHERE bookid = ? AND isextension = 0";
	        pstmt = conn.prepareStatement(checkSql);
	        pstmt.setInt(1, bookid);
	        rs = pstmt.executeQuery();

	        if (rs.next()) { // 연장 가능한 도서 대출이 있을 경우
	            // 해당 도서 대출의 deadline을 14일 연장한 날짜로 업데이트하는 쿼리
	            String updateSql = "UPDATE bookloan SET deadline = DATEADD(day, 14, deadline), isextension = 1 WHERE bookid = ? AND isextension = 0";
	            pstmt1 = conn.prepareStatement(updateSql);
	            pstmt1.setInt(1, bookid);
	            pstmt1.executeUpdate();
	            
	            // 연장 완료 메시지 출력
	            System.out.println("도서 대출이 연장되었습니다.");
	            
	            conn.commit();
	        } else { // 연장 가능한 도서 대출이 없을 경우
	            System.out.println("더 이상 연장할 수 없습니다.");
	        }
	    } catch (SQLException | ClassNotFoundException e) {
	        e.printStackTrace();
	        
	        if (conn != null) {
	            try {
	                conn.rollback();
	            } catch (SQLException e1) {
	                e1.printStackTrace();
	            }
	        }
	    } finally {
	        if (rs != null) {
	            try {
	                rs.close();
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	        }
	        
	        if (pstmt != null) {
	            try {
	                pstmt.close();
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	        }
	        
	        if (conn != null) {
	            try {
	                conn.setAutoCommit(true);
	                conn.close();
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	        }
	    }
	}
	@Override
	public void deleteBookLoan(int id) {
		// TODO Auto-generated method stub

	}
}

